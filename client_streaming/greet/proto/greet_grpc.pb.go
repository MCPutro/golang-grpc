// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: greet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetingClient is the client API for Greeting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingClient interface {
	GreetingAll(ctx context.Context, opts ...grpc.CallOption) (Greeting_GreetingAllClient, error)
}

type greetingClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingClient(cc grpc.ClientConnInterface) GreetingClient {
	return &greetingClient{cc}
}

func (c *greetingClient) GreetingAll(ctx context.Context, opts ...grpc.CallOption) (Greeting_GreetingAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeting_ServiceDesc.Streams[0], "/proto.Greeting/GreetingAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingGreetingAllClient{stream}
	return x, nil
}

type Greeting_GreetingAllClient interface {
	Send(*GreetingReq) error
	CloseAndRecv() (*GreetingResp, error)
	grpc.ClientStream
}

type greetingGreetingAllClient struct {
	grpc.ClientStream
}

func (x *greetingGreetingAllClient) Send(m *GreetingReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetingGreetingAllClient) CloseAndRecv() (*GreetingResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GreetingResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetingServer is the server API for Greeting service.
// All implementations must embed UnimplementedGreetingServer
// for forward compatibility
type GreetingServer interface {
	GreetingAll(Greeting_GreetingAllServer) error
	mustEmbedUnimplementedGreetingServer()
}

// UnimplementedGreetingServer must be embedded to have forward compatible implementations.
type UnimplementedGreetingServer struct {
}

func (UnimplementedGreetingServer) GreetingAll(Greeting_GreetingAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetingAll not implemented")
}
func (UnimplementedGreetingServer) mustEmbedUnimplementedGreetingServer() {}

// UnsafeGreetingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingServer will
// result in compilation errors.
type UnsafeGreetingServer interface {
	mustEmbedUnimplementedGreetingServer()
}

func RegisterGreetingServer(s grpc.ServiceRegistrar, srv GreetingServer) {
	s.RegisterService(&Greeting_ServiceDesc, srv)
}

func _Greeting_GreetingAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetingServer).GreetingAll(&greetingGreetingAllServer{stream})
}

type Greeting_GreetingAllServer interface {
	SendAndClose(*GreetingResp) error
	Recv() (*GreetingReq, error)
	grpc.ServerStream
}

type greetingGreetingAllServer struct {
	grpc.ServerStream
}

func (x *greetingGreetingAllServer) SendAndClose(m *GreetingResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetingGreetingAllServer) Recv() (*GreetingReq, error) {
	m := new(GreetingReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greeting_ServiceDesc is the grpc.ServiceDesc for Greeting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Greeting",
	HandlerType: (*GreetingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetingAll",
			Handler:       _Greeting_GreetingAll_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "greet.proto",
}
