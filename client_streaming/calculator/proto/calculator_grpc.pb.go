// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: calculator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculatorOperationClient is the client API for CalculatorOperation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorOperationClient interface {
	Average(ctx context.Context, opts ...grpc.CallOption) (CalculatorOperation_AverageClient, error)
}

type calculatorOperationClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorOperationClient(cc grpc.ClientConnInterface) CalculatorOperationClient {
	return &calculatorOperationClient{cc}
}

func (c *calculatorOperationClient) Average(ctx context.Context, opts ...grpc.CallOption) (CalculatorOperation_AverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorOperation_ServiceDesc.Streams[0], "/proto.calculatorOperation/Average", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorOperationAverageClient{stream}
	return x, nil
}

type CalculatorOperation_AverageClient interface {
	Send(*AverageReq) error
	CloseAndRecv() (*AverageResp, error)
	grpc.ClientStream
}

type calculatorOperationAverageClient struct {
	grpc.ClientStream
}

func (x *calculatorOperationAverageClient) Send(m *AverageReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorOperationAverageClient) CloseAndRecv() (*AverageResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorOperationServer is the server API for CalculatorOperation service.
// All implementations must embed UnimplementedCalculatorOperationServer
// for forward compatibility
type CalculatorOperationServer interface {
	Average(CalculatorOperation_AverageServer) error
	mustEmbedUnimplementedCalculatorOperationServer()
}

// UnimplementedCalculatorOperationServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorOperationServer struct {
}

func (UnimplementedCalculatorOperationServer) Average(CalculatorOperation_AverageServer) error {
	return status.Errorf(codes.Unimplemented, "method Average not implemented")
}
func (UnimplementedCalculatorOperationServer) mustEmbedUnimplementedCalculatorOperationServer() {}

// UnsafeCalculatorOperationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorOperationServer will
// result in compilation errors.
type UnsafeCalculatorOperationServer interface {
	mustEmbedUnimplementedCalculatorOperationServer()
}

func RegisterCalculatorOperationServer(s grpc.ServiceRegistrar, srv CalculatorOperationServer) {
	s.RegisterService(&CalculatorOperation_ServiceDesc, srv)
}

func _CalculatorOperation_Average_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorOperationServer).Average(&calculatorOperationAverageServer{stream})
}

type CalculatorOperation_AverageServer interface {
	SendAndClose(*AverageResp) error
	Recv() (*AverageReq, error)
	grpc.ServerStream
}

type calculatorOperationAverageServer struct {
	grpc.ServerStream
}

func (x *calculatorOperationAverageServer) SendAndClose(m *AverageResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorOperationAverageServer) Recv() (*AverageReq, error) {
	m := new(AverageReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorOperation_ServiceDesc is the grpc.ServiceDesc for CalculatorOperation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculatorOperation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.calculatorOperation",
	HandlerType: (*CalculatorOperationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Average",
			Handler:       _CalculatorOperation_Average_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "calculator.proto",
}
