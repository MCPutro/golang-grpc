BIN_DIR = bin
PROTO_DIR = proto

ifeq ($(OS), Windows_NT)
	SHELL := powershell.exe
	.SHELLFLAGS := -NoProfile -Command
#	OS = $(shell "{0} {1}" -f "windows", (Get-ComputerInfo -Property OsVersion, OsArchitecture | Format-Table -HideTableHeaders | Out-String))
	PACKAGE = $(shell (Get-Content go.mod -head 1).Split(" ")[1])
#	CHECK_DIR_CMD = if (!(Test-Path $@)) { $$e = [char]27; Write-Error "$$e[31mDirectory $@ doesn't exist$${e}[0m" }
	HELP_CMD = Select-String "^[a-zA-Z_-]+:.*?\#\# .*$$" "./Makefile" | Foreach-Object { $$_data = $$_.matches -split ":.*?\#\# "; $$obj = New-Object PSCustomObject; Add-Member -InputObject $$obj -NotePropertyName ('Command') -NotePropertyValue $$_data[0]; Add-Member -InputObject $$obj -NotePropertyName ('Description') -NotePropertyValue $$_data[1]; $$obj } | Format-Table -HideTableHeaders @{Expression={ $$e = [char]27; "$$e[36m$$($$_.Command)$${e}[0m" }}, Description
	RM_F_CMD = Remove-Item -erroraction silentlycontinue -Force
	RM_RF_CMD = ${RM_F_CMD} -Recurse
else
	SHELL := bash
#	UNAME := $(shell uname -s)
#	VERSION_AND_ARCH = $(shell uname -rm)
#	ifeq ($(UNAME),Darwin)
#		OS = macos ${VERSION_AND_ARCH}
#	else ifeq ($(UNAME),Linux)
#		OS = linux ${VERSION_AND_ARCH}
#	else
#    $(error OS not supported by this Makefile)
#	endif
	PACKAGE = $(shell head -1 go.mod | awk '{print $$2}')
#	CHECK_DIR_CMD = test -d $@ || (echo "\033[31mDirectory $@ doesn't exist\033[0m" && false)
	HELP_CMD = grep -E '^[a-zA-Z_-]+:.*?\#\# .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?\#\# "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
	RM_F_CMD = rm -f
	RM_RF_CMD = ${RM_F_CMD} -r
endif

.DEFAULT_GOAL := help
.PHONY: greet blog calculator help
project := unary-greeting unary-calculator client_streaming-calculator client_streaming-greet server_streaming-greeting server_streaming-calculator

#all: $(project) ## Generate Pbs and build

unary-greeting: $@ ## Generate Pbs and build for unary_greeting
unary-calculator: $@ ## Generate Pbs and build for unary_calculator
client_streaming-calculator: $@ ## Generate Pbs and build for client_streaming-calculator
client_streaming-greet: $@ ## Generate Pbs and build for client_streaming-greet
server_streaming-greeting: $@ ## Generate Pbs and build for server_streaming-greeting
server_streaming-calculator: $@ ## Generate Pbs and build for server_streaming-calculator

$(project):
#	@${CHECK_DIR_CMD}
	protoc -I$(subst -,/,$@)/${PROTO_DIR} --go_opt=module=${PACKAGE} --go_out=. --go-grpc_opt=module=${PACKAGE} --go-grpc_out=. $(subst -,/,$@)/${PROTO_DIR}/*.proto

help: ## Show this help
	@${HELP_CMD}